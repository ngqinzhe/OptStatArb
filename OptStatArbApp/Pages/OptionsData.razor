@page "/optionsdata"

@inject IHttpClientFactory _clientFactory

<h3 align="center" style="color: darkgray;">Options Data</h3>

<div align="center">
    <input type="text" @bind-value="@searchTerm" />
    <input type="button" value="Search" @onclick="@Search" />
</div>


@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <div class="h2">@errorString</div>
}
else if (optmodel is null)
{
    <div></div>
}
else
{
    var q = optmodel.optionChain.result.FirstOrDefault().quote;
    <div class="container text-center">
        <div class="row">
            <table class="table table-hover table-dark col-sm m-5">
                <thead style="border-radius: 10px">
                    <tr style="background-color: darkcyan">
                        <th>Strike Price</th>
                        <th>Market Call Price</th>
                        <th>Statistical Price</th>
                        <th>Arbitrage</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var cOpt in optmodel.optionChain.result.FirstOrDefault().options.FirstOrDefault().calls)
                    {
                        if (blackScholes(cOpt, q) > 0.001)
                        {
                            <tr>
                                <td>@cOpt.strike</td>
                                <td>@cOpt.lastPrice</td>
                                <td>@blackScholes(cOpt, q).ToString("N3")</td>
                                <td>@((cOpt.lastPrice - blackScholes(cOpt, q)) > 0.1 * cOpt.lastPrice ? "Yes" : "No")</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            <table class="table table-hover table-dark col-sm m-5">
                <thead>
                    <tr style="background-color: darkred">
                        <th>Strike Price</th>
                        <th>Market Put Price</th>
                        <th>Statistical Price</th>
                        <th>Arbitrage</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var pOpt in optmodel.optionChain.result.FirstOrDefault().options.FirstOrDefault().puts)
                    {
                        if (blackScholes(pOpt, q) > 0.001)
                        {
                            <tr>
                                <td>@pOpt.strike</td>
                                <td>@pOpt.lastPrice</td>
                                <td>@blackScholes(pOpt, q).ToString("N3")</td>
                                <td>@((pOpt.lastPrice - blackScholes(pOpt, q)) > 0.1 * pOpt.lastPrice ? "Yes" : "No")</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    OptionsDataModel optmodel;
    string errorString;
    string searchTerm;

    @* protected override async Task OnInitializedAsync()
        { } *@
    protected async Task Search()
    {
        var client = _clientFactory.CreateClient("options");

        while (true)
        {
            try
            {
                optmodel = await client.GetFromJsonAsync<OptionsDataModel>(searchTerm);
                errorString = null;
                await InvokeAsync(() => StateHasChanged());
            }
            catch (Exception e)
            {
                errorString = $"There was an error: {e.Message}";
            }

            await Task.Delay(2000);
        }
    }

    protected double normCDF(double x)
    {
        double a1 = 0.254829592;
        double a2 = -0.284496736;
        double a3 = 1.421413741;
        double a4 = -1.453152027;
        double a5 = 1.061405429;
        double p = 0.3275911;

        int sign = 1;
        if (x < 0) sign = -1;

        x = Math.Abs(x) / Math.Sqrt(2.0);

        double t = 1.0 / (1.0 + p * x);
        double y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.Exp(-x * x);

        return 0.5 * (1.0 + sign * y);
        }

    protected double blackScholes(Call c, Quote q)
    {
        double s = q.regularMarketOpen;
        double k = c.strike;
        DateTime dateTime = UnixTimeToDateTime(c.expiration);
        DateTime timeNow = DateTime.Now;
        TimeSpan timeSpan = dateTime - timeNow;
        double t = timeSpan.TotalDays / 365;
        double v = c.impliedVolatility;
        int cp = 1;

        double rf = 0.0135;
        double d1 = (Math.Log(s / k) + (rf + 0.5 * Math.Pow(v, 2)) * t) / (v * Math.Sqrt(t));
        double d2 = d1 - v * Math.Sqrt(t);
        double optPrice = (cp * s * normCDF(cp * d1)) - (cp * k * Math.Exp(-rf * t) * normCDF(cp * d2));

        return optPrice;
    }

    protected double blackScholes(Put p, Quote q)
    {
        double s = q.regularMarketOpen;
        double k = p.strike;
        DateTime dateTime = UnixTimeToDateTime(p.expiration);
        DateTime timeNow = DateTime.Now;
        TimeSpan timeSpan = dateTime - timeNow;
        double t = timeSpan.TotalDays / 365;
        double v = p.impliedVolatility;
        int cp = -1;

        double rf = 0.0135;
        double d1 = (Math.Log(s / k) + (rf + 0.5 * Math.Pow(v, 2)) * t) / (v * Math.Sqrt(t));
        double d2 = d1 - v * Math.Sqrt(t);
        double optPrice = (cp * s * normCDF(cp * d1)) - (cp * k * Math.Exp(-rf * t) * normCDF(cp * d2));
        return optPrice;
    }

    protected DateTime UnixTimeToDateTime(double unixtime)
    {
        System.DateTime dtDateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
        dtDateTime = dtDateTime.AddSeconds(unixtime).ToLocalTime();
        return dtDateTime;
    }
}
